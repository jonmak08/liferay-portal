<?xml version="1.0"?>

<project default="prepare-working-dir" xmlns:if="ant:if" xmlns:unless="ant:unless">
	<property file="working.dir.${user.name}.properties" />
	<property file="working.dir.${env.COMPUTERNAME}.properties" />
	<property file="working.dir.${env.HOST}.properties" />
	<property file="working.dir.${env.HOSTNAME}.properties" />
	<property file="working.dir.properties" />

	<condition property="prepare.working.dir.private">
		<not>
			<available file="git-commit-portal" />
		</not>
	</condition>

<<<<<<< HEAD
	<macrodef name="fetch-portal">
		<attribute name="fetch.portal.branch.name" />
		<attribute name="fetch.portal.repository.name" />

		<sequential>
			<local name="fetch.portal.repository.url" />

			<condition else="git@github.com:liferay/@{fetch.portal.repository.name}.git" property="fetch.portal.repository.url" value="git@github-dev.liferay.com:liferay/@{fetch.portal.repository.name}.git">
				<isset property="env.JENKINS_HOME" />
			</condition>

			<echo>git fetch --force --no-tags ${fetch.portal.repository.url} @{fetch.portal.branch.name}</echo>

			<exec executable="git">
				<arg value="fetch" />
				<arg value="--force" />
				<arg value="--no-tags" />
				<arg value="${fetch.portal.repository.url}" />
				<arg value="@{fetch.portal.branch.name}" />
			</exec>
		</sequential>
	</macrodef>

	<macrodef name="prepare-working-dir">
		<attribute name="from.branch.name" />
		<attribute name="to.branch.name" />
=======
	<macrodef name="prepare-working-dir">
		<attribute name="private.branch.name" />
		<attribute name="public.branch.name" />
>>>>>>> compatible

		<sequential>
			<local name="replace.regex.tmp.file" />

			<tempfile createfile="true" deleteonexit="true" property="replace.regex.tmp.file" />

			<!-- build.properties -->

			<replace
				failOnNoReplacements="true"
				file="build.properties"
<<<<<<< HEAD
				if:set="build.repository.private.password[@{to.branch.name}]"
				token="build.repository.private.password=${build.repository.private.password[@{from.branch.name}]}"
				value="build.repository.private.password=${build.repository.private.password[@{to.branch.name}]}"
=======
				token="build.repository.private.password=${build.repository.private.password[@{public.branch.name}]}"
				value="build.repository.private.password=${build.repository.private.password[@{private.branch.name}]}"
>>>>>>> compatible
			/>
			<replace
				failOnNoReplacements="true"
				file="build.properties"
<<<<<<< HEAD
				if:set="build.repository.private.url[@{to.branch.name}]"
				token="build.repository.private.url=${build.repository.private.url[@{from.branch.name}]}"
				value="build.repository.private.url=${build.repository.private.url[@{to.branch.name}]}"
=======
				token="build.repository.private.url=${build.repository.private.url[@{public.branch.name}]}"
				value="build.repository.private.url=${build.repository.private.url[@{private.branch.name}]}"
>>>>>>> compatible
			/>
			<replace
				failOnNoReplacements="true"
				file="build.properties"
<<<<<<< HEAD
				if:set="build.repository.private.username[@{to.branch.name}]"
				token="build.repository.private.username=${build.repository.private.username[@{from.branch.name}]}"
				value="build.repository.private.username=${build.repository.private.username[@{to.branch.name}]}"
=======
				token="build.repository.private.username=${build.repository.private.username[@{public.branch.name}]}"
				value="build.repository.private.username=${build.repository.private.username[@{private.branch.name}]}"
>>>>>>> compatible
			/>
			<replace
				failOnNoReplacements="true"
				file="build.properties"
<<<<<<< HEAD
				token="git.working.branch.name=@{from.branch.name}"
				value="git.working.branch.name=@{to.branch.name}"
=======
				token="git.working.branch.name=@{public.branch.name}"
				value="git.working.branch.name=@{private.branch.name}"
>>>>>>> compatible
			/>

			<!-- release.properties -->

			<replace
				failOnNoReplacements="true"
				file="release.properties"
<<<<<<< HEAD
				token="lp.version=${lp.version[@{from.branch.name}]}"
				value="lp.version=${lp.version[@{to.branch.name}]}"
=======
				token="lp.version=${lp.version[@{public.branch.name}]}"
				value="lp.version=${lp.version[@{private.branch.name}]}"
>>>>>>> compatible
			/>
			<replace
				failOnNoReplacements="true"
				file="release.properties"
<<<<<<< HEAD
				token="lp.version.dtd=${lp.version.dtd[@{from.branch.name}]}"
				value="lp.version.dtd=${lp.version.dtd[@{to.branch.name}]}"
=======
				token="lp.version.dtd=${lp.version.dtd[@{public.branch.name}]}"
				value="lp.version.dtd=${lp.version.dtd[@{private.branch.name}]}"
>>>>>>> compatible
			/>

			<!-- test.properties -->

			<replace
				failOnNoReplacements="true"
				file="test.properties"
<<<<<<< HEAD
				token="liferay.portal.branch=${liferay.portal.branch[@{from.branch.name}]}"
				value="liferay.portal.branch=${liferay.portal.branch[@{to.branch.name}]}"
=======
				token="liferay.portal.branch=${liferay.portal.branch[@{public.branch.name}]}"
				value="liferay.portal.branch=${liferay.portal.branch[@{private.branch.name}]}"
>>>>>>> compatible
			/>
			<replace
				failOnNoReplacements="true"
				file="test.properties"
<<<<<<< HEAD
				if:set="test.run.environment[@{to.branch.name}]"
				token="test.run.environment=${test.run.environment[@{from.branch.name}]}"
				value="test.run.environment=${test.run.environment[@{to.branch.name}]}"
=======
				token="test.run.environment=CE"
				value="test.run.environment=EE"
>>>>>>> compatible
			/>
			<replace
				failOnNoReplacements="true"
				file="test.properties"
<<<<<<< HEAD
				if:set="testray.build.type[@{to.branch.name}]"
				token="testray.build.type=${testray.build.type[@{from.branch.name}]}"
				value="testray.build.type=${testray.build.type[@{to.branch.name}]}"
=======
				token="testray.build.type=${testray.build.type[@{public.branch.name}]}"
				value="testray.build.type=${testray.build.type[@{private.branch.name}]}"
>>>>>>> compatible
			/>

			<!-- portal-kernel/src/com/liferay/portal/kernel/util/ReleaseInfo.java -->

			<replace-regex
				replace.regex.file="portal-kernel/src/com/liferay/portal/kernel/util/ReleaseInfo.java"
<<<<<<< HEAD
				replace.regex.pattern="${release.info.build[@{from.branch.name}]}"
				replace.regex.replacement="${release.info.build[@{to.branch.name}]}"
=======
				replace.regex.pattern="${release.info.build[@{public.branch.name}]}"
				replace.regex.replacement="${release.info.build[@{private.branch.name}]}"
>>>>>>> compatible
				replace.regex.tmp.file="${replace.regex.tmp.file}"
			/>
			<replace-regex
				replace.regex.file="portal-kernel/src/com/liferay/portal/kernel/util/ReleaseInfo.java"
<<<<<<< HEAD
				replace.regex.pattern="${release.info.date[@{from.branch.name}]}"
				replace.regex.replacement="${release.info.date[@{to.branch.name}]}"
=======
				replace.regex.pattern="${release.info.date[@{public.branch.name}]}"
				replace.regex.replacement="${release.info.date[@{private.branch.name}]}"
>>>>>>> compatible
				replace.regex.tmp.file="${replace.regex.tmp.file}"
			/>
			<replace
				failOnNoReplacements="true"
				file="portal-kernel/src/com/liferay/portal/kernel/util/ReleaseInfo.java"
<<<<<<< HEAD
				if:set="release.info.name[@{to.branch.name}]"
				token="${release.info.name[@{from.branch.name}]}"
				value="${release.info.name[@{to.branch.name}]}"
			/>
			<replace-regex
				replace.regex.file="portal-kernel/src/com/liferay/portal/kernel/util/ReleaseInfo.java"
				replace.regex.pattern="${release.info.version[@{from.branch.name}]}"
				replace.regex.replacement="${release.info.version[@{to.branch.name}]}"
=======
				token="${release.info.name[@{public.branch.name}]}"
				value="${release.info.name[@{private.branch.name}]}"
			/>
			<replace-regex
				replace.regex.file="portal-kernel/src/com/liferay/portal/kernel/util/ReleaseInfo.java"
				replace.regex.pattern="${release.info.version[@{public.branch.name}]}"
				replace.regex.replacement="${release.info.version[@{private.branch.name}]}"
>>>>>>> compatible
				replace.regex.tmp.file="${replace.regex.tmp.file}"
			/>
			<replace-regex
				replace.regex.file="portal-kernel/src/com/liferay/portal/kernel/util/ReleaseInfo.java"
<<<<<<< HEAD
				replace.regex.pattern="${release.info.version.display.name[@{from.branch.name}]}"
				replace.regex.replacement="${release.info.version.display.name[@{to.branch.name}]}"
=======
				replace.regex.pattern="${release.info.version.display.name[@{public.branch.name}]}"
				replace.regex.replacement="${release.info.version.display.name[@{private.branch.name}]}"
>>>>>>> compatible
				replace.regex.tmp.file="${replace.regex.tmp.file}"
			/>

			<!-- sql/portal-data-release.sql -->

			<replace-regex
				replace.regex.file="sql/portal-data-release.sql"
<<<<<<< HEAD
				replace.regex.pattern="${portal.data.release[@{from.branch.name}]}"
				replace.regex.replacement="${portal.data.release[@{to.branch.name}]}"
=======
				replace.regex.pattern="${portal.data.release[@{public.branch.name}]}"
				replace.regex.replacement="${portal.data.release[@{private.branch.name}]}"
>>>>>>> compatible
				replace.regex.tmp.file="${replace.regex.tmp.file}"
			/>

			<!-- sql/sql.properties -->

			<replace
				failOnNoReplacements="true"
				file="sql/sql.properties"
<<<<<<< HEAD
				if:set="database.types[@{to.branch.name}]"
				token="database.types=${database.types[@{from.branch.name}]}"
				value="database.types=${database.types[@{to.branch.name}]}"
=======
				token="database.types=${database.types[@{public.branch.name}]}"
				value="database.types=${database.types[@{private.branch.name}]}"
>>>>>>> compatible
			/>
		</sequential>
	</macrodef>

	<macrodef name="prepare-working-dir-private">
		<sequential>
			<loadproperties srcFile="working.dir.properties">
				<filterchain>
					<linecontains>
<<<<<<< HEAD
						<contains value="to.branch.name" />
=======
						<contains value="private.branch.name" />
>>>>>>> compatible
					</linecontains>
				</filterchain>
			</loadproperties>

			<loadproperties srcFile="working.dir.properties">
				<filterchain>
					<tokenfilter>
<<<<<<< HEAD
						<containsregex pattern="(build\.repository\.private\.\w+)\Q[${to.branch.name}]\E" replace="\1" />
=======
						<containsregex pattern="(build\.repository\.private\.\w+)\Q[${private.branch.name}]\E" replace="\1" />
>>>>>>> compatible
					</tokenfilter>
				</filterchain>
			</loadproperties>

			<delete file="working.dir.properties" />

			<propertyfile file="build.${user.name}.properties">
				<entry key="build.repository.private.password" value="${build.repository.private.password}" />
				<entry key="build.repository.private.url" value="${build.repository.private.url}" />
				<entry key="build.repository.private.username" value="${build.repository.private.username}" />
			</propertyfile>
		</sequential>
	</macrodef>

	<macrodef name="replace-regex">
		<attribute name="replace.regex.file" />
		<attribute name="replace.regex.pattern" />
		<attribute name="replace.regex.replacement" />
		<attribute name="replace.regex.tmp.file" />

		<sequential>
			<local name="replace.regex.changed" />

			<replaceregexp
				file="@{replace.regex.file}"
				match="@{replace.regex.pattern}"
				replace="@{replace.regex.replacement}"
			/>

			<uptodate
				property="replace.regex.changed"
				srcfile="@{replace.regex.tmp.file}"
				targetfile="@{replace.regex.file}"
			/>

			<fail
				message="Unable to replace pattern &quot;@{replace.regex.pattern}&quot; with &quot;@{replace.regex.replacement}&quot; in @{replace.regex.file}."
				unless="replace.regex.changed"
			/>
		</sequential>
	</macrodef>

	<target name="checkout-portal" unless="prepare.working.dir.private">
		<loadfile property="portal.git.commit" srcFile="git-commit-portal">
			<filterchain>
				<striplinebreaks />
			</filterchain>
		</loadfile>

<<<<<<< HEAD
		<local name="return.code" />

		<exec executable="git" failonerror="false" resultproperty="return.code">
			<arg value="log" />
			<arg value="-n" />
			<arg value="1" />
			<arg value="${portal.git.commit}" />
		</exec>

		<condition property="portal.git.commit.available">
			<equals arg1="${return.code}" arg2="0" />
		</condition>

		<fetch-portal
			fetch.portal.branch.name="${public.branch.name}"
			fetch.portal.repository.name="liferay-portal"
			unless:set="portal.git.commit.available"
		/>

		<local name="return.code" />

		<exec executable="git" failonerror="false" resultproperty="return.code">
			<arg value="tag" />
			<arg value="--force" />
			<arg value="git-commit-portal" />
			<arg value="${portal.git.commit}" />
		</exec>

		<fail message="Please fetch the public branch from upstream before using this command.">
			<condition>
				<not>
					<equals arg1="${return.code}" arg2="0" />
				</not>
			</condition>
		</fail>

=======
		<exec executable="git" failonerror="true">
			<arg value="fetch" />
			<arg value="--force" />
			<arg value="--no-tags" />
			<arg value="upstream" />
			<arg value="${portal.git.commit}:refs/tags/git-commit-portal" />
		</exec>

>>>>>>> compatible
		<loadresource property="working.dir.checkout.excludes.git">
			<propertyresource name="working.dir.checkout.excludes" />
			<filterchain>
				<replacestring from="," to=" :(exclude)" />
			</filterchain>
		</loadresource>

		<exec executable="git" failonerror="true">
			<arg value="checkout" />
			<arg value="refs/tags/git-commit-portal" />
			<arg value="." />
			<arg line=":(exclude)${working.dir.checkout.excludes.git}" />
		</exec>

		<exec executable="git">
			<arg value="reset" />
			<arg value="HEAD" />
			<arg value="." />
		</exec>

		<exec executable="git">
			<arg value="tag" />
			<arg value="--delete" />
			<arg value="git-commit-portal" />
		</exec>
	</target>

	<target if="prepare.working.dir.private" name="checkout-portal-private">
		<loadfile property="portal.private.git.commit" srcFile="git-commit-portal-private">
			<filterchain>
				<striplinebreaks />
			</filterchain>
		</loadfile>

		<exec executable="git" resultproperty="portal.private.git.commit.result">
			<arg value="cat-file" />
			<arg value="-e" />
			<arg value="${portal.private.git.commit}" />
		</exec>

		<fail message="Please run this command from the liferay-portal-ee repository.">
			<condition>
				<not>
					<equals arg1="${portal.private.git.commit.result}" arg2="0" />
				</not>
			</condition>
		</fail>

<<<<<<< HEAD
		<local name="return.code" />

		<exec executable="git" failonerror="false" resultproperty="return.code">
			<arg value="log" />
			<arg value="-n" />
			<arg value="1" />
			<arg value="${portal.private.git.commit}" />
		</exec>

		<condition property="portal.private.git.commit.available">
			<equals arg1="${return.code}" arg2="0" />
		</condition>

		<fetch-portal
			fetch.portal.branch.name="${private.branch.name}"
			fetch.portal.repository.name="liferay-portal-ee"
			unless:set="portal.private.git.commit.available"
		/>

		<local name="return.code" />

		<exec executable="git" failonerror="false" resultproperty="return.code">
			<arg value="tag" />
			<arg value="--force" />
			<arg value="git-commit-portal-private" />
			<arg value="${portal.private.git.commit}" />
		</exec>

		<fail message="Please fetch the private branch from upstream before using this command.">
			<condition>
				<not>
					<equals arg1="${return.code}" arg2="0" />
				</not>
			</condition>
		</fail>

		<exec executable="git" failonerror="true">
			<arg value="checkout" />
			<arg value="refs/tags/git-commit-portal-private" />
			<arg if:true="${checkout.portal.private.releng}" value="modules/.releng/private" />
=======
		<exec executable="git" failonerror="true">
			<arg value="fetch" />
			<arg value="--force" />
			<arg value="--no-tags" />
			<arg value="upstream" />
			<arg value="${portal.private.git.commit}:refs/tags/git-commit-portal-private" />
		</exec>

		<exec executable="git" failonerror="true">
			<arg value="checkout" />
			<arg value="refs/tags/git-commit-portal-private" />
>>>>>>> compatible
			<arg value="modules/private" />
			<arg value="working.dir.properties" />
		</exec>

		<exec executable="git">
			<arg value="reset" />
			<arg value="HEAD" />
<<<<<<< HEAD
			<arg if:true="${checkout.portal.private.releng}" value="modules/.releng/private" />
=======
>>>>>>> compatible
			<arg value="modules/private" />
			<arg value="working.dir.properties" />
		</exec>

		<exec executable="git">
			<arg value="tag" />
			<arg value="--delete" />
			<arg value="git-commit-portal-private" />
		</exec>
	</target>

	<target depends="checkout-portal,checkout-portal-private" name="prepare-working-dir">
<<<<<<< HEAD
		<property name="from.branch.name" value="${public.branch.name}" />
		<property name="to.branch.name" value="${private.branch.name}" />

		<prepare-working-dir
			from.branch.name="${from.branch.name}"
			to.branch.name="${to.branch.name}"
=======
		<prepare-working-dir
			private.branch.name="${private.branch.name}"
			public.branch.name="${public.branch.name}"
>>>>>>> compatible
			unless:true="${prepare.working.dir.private}"
		/>

		<prepare-working-dir-private
			if:true="${prepare.working.dir.private}"
		/>
	</target>
</project>