import com.liferay.gradle.plugins.node.tasks.PublishNodeModuleTask
import com.liferay.gradle.util.copy.StripPathSegmentsAction

configurations {
	alloyUI
<<<<<<< HEAD
	fontAwesome
}

task buildAlloyUITheme(type: Copy)
task buildClay(type: Copy)
task buildClayFonts(type: Copy)
task buildClayIcons(type: Copy)
task buildFontAwesome(type: Copy)
=======
	lexicon
}

task buildAlloyUITheme(type: Copy)
task buildLexicon(type: Copy)
task buildLexiconFonts(type: Copy)
>>>>>>> compatible
task buildLexiconIcons(type: Copy)
task buildTheme
task publishNodeModule(type: PublishNodeModuleTask)

<<<<<<< HEAD
String alloyUIVersion = "3.1.0-deprecated.38"
String fontAwesomeVersion = "3.2.1"
=======
String alloyUIVersion = "3.0.3-deprecated.62"
String lexiconVersion = "1.0.24"
>>>>>>> compatible

File themeDestinationDir = file("src/main/resources/META-INF/resources/_unstyled");

buildAlloyUITheme {
	File alloyThemeDestinationDir = new File(themeDestinationDir, "images/aui")

	doFirst {
		delete alloyThemeDestinationDir
	}

	eachFile new StripPathSegmentsAction(5)

	filesMatching "**/build/aui-*/assets/skins/sam/", new StripPathSegmentsAction(5)
	filesMatching "**/build/aui-skin-deprecated/images/", new StripPathSegmentsAction(3)

	from {
		zipTree(configurations.alloyUI.singleFile)
	}

	include "META-INF/resources/webjars/alloy-ui/${alloyUIVersion}/build/aui-*/assets/skins/sam/**.gif"
	include "META-INF/resources/webjars/alloy-ui/${alloyUIVersion}/build/aui-*/assets/skins/sam/**.jpg"
	include "META-INF/resources/webjars/alloy-ui/${alloyUIVersion}/build/aui-*/assets/skins/sam/**.png"
	include "META-INF/resources/webjars/alloy-ui/${alloyUIVersion}/build/aui-skin-deprecated/images/"

	includeEmptyDirs = false
	into alloyThemeDestinationDir
}

buildCSS {
	dependsOn buildTheme
}

<<<<<<< HEAD
buildClay {
	File clayDestinationDir = new File(themeDestinationDir, "css/clay")

	dependsOn npmInstall

	doFirst {
		delete clayDestinationDir
	}

	eachFile {
		if (name in ["atlas.scss", "bootstrap.scss", "base.scss"]) {
=======
buildLexicon {
	File lexiconDestinationDir = new File(themeDestinationDir, "css/aui/lexicon")

	doFirst {
		delete lexiconDestinationDir
	}

	eachFile {
		if (name in ["atlas.scss", "bootstrap.scss", "lexicon-base.scss"]) {
>>>>>>> compatible
			filter {
				String line ->

				if (line == "// INSERT CUSTOM EXTENSIONS") {
<<<<<<< HEAD
					line = '''\
@import "variables";

@import "../liferay_variables_custom";
@import "../liferay_variables";
@import "bourbon";
@import "../clay_custom";
@import "../liferay_custom";'''
				}
				else if (line == "// INSERT CUSTOM VARS") {
					line = '''\
@import url(font_awesome.css);
@import "../clay_variables";'''
=======
					line = """\
@import \"../../liferay_variables_custom\";
@import \"../../liferay_variables\";
@import \"bourbon\";
@import \"../../aui_custom\";
@import \"../../liferay_custom\";"""
				}
				else if (line == "// INSERT CUSTOM VARS") {
					line = """\
@import url(font-awesome.css);
@import \"../../aui_variables\";"""
>>>>>>> compatible
				}

				return line
			}
		}
<<<<<<< HEAD
		else if (name in ["atlas-variables.scss", "base-variables.scss"]) {
=======
		else if (name in ["atlas-variables.scss", "lexicon-base-variables.scss"]) {
>>>>>>> compatible
			filter {
				String line ->

				if (line == "// INSERT CUSTOM BASE VARS") {
<<<<<<< HEAD
					line = '''\
@import "../clay_variables";'''
				}
				else if (line == "// INSERT CUSTOM VARS") {
					line = '''\

@import "../liferay_variables_custom";
@import "../liferay_variables";'''
=======
					line = """\
@import \"../../aui_variables\";
@import \"fonts/alloy-font-awesome/scss/variables\";"""
				}
				else if (line == "// INSERT CUSTOM VARS") {
					line = """\
@import \"../../liferay_variables_custom\";
@import \"../../liferay_variables\";"""
>>>>>>> compatible
				}

				return line
			}
		}
	}

<<<<<<< HEAD
	eachFile new StripPathSegmentsAction(3)
	from npmInstall.nodeModulesDir
	include "clay/src/scss/"
	includeEmptyDirs = false
	into clayDestinationDir
}

buildClayFonts {
	File clayFontsDestinationDir = new File(themeDestinationDir, "css/clay/fonts")

	dependsOn buildClay

	doFirst {
		delete clayFontsDestinationDir
	}

	eachFile new StripPathSegmentsAction(3)
	from npmInstall.nodeModulesDir
	include "clay/release/fonts/"
	includeEmptyDirs = false
	into clayFontsDestinationDir
}

buildClayIcons {
	File clayIconsDestinationDir = new File(themeDestinationDir, "images/clay")

	dependsOn npmInstall

	doFirst {
		delete clayIconsDestinationDir
	}

	eachFile new StripPathSegmentsAction(4)
	from npmInstall.nodeModulesDir
	include "clay/build/images/icons/"
	includeEmptyDirs = false
	into clayIconsDestinationDir
}

buildFontAwesome {
	File fontAwesomeDestinationDir = new File(themeDestinationDir, "css/font-awesome")

	doFirst {
		delete fontAwesomeDestinationDir
	}

	eachFile new StripPathSegmentsAction(5)

	from {
		zipTree(configurations.fontAwesome.singleFile)
	}

	include "META-INF/resources/webjars/font-awesome/${fontAwesomeVersion}/scss/**.scss"
	include "META-INF/resources/webjars/font-awesome/${fontAwesomeVersion}/font/**"

	includeEmptyDirs = false
	into fontAwesomeDestinationDir
=======
	eachFile new StripPathSegmentsAction(7)

	from {
		zipTree(configurations.lexicon.singleFile)
	}

	include "META-INF/resources/webjars/lexicon/${lexiconVersion}/release/scss/"
	includeEmptyDirs = false
	into lexiconDestinationDir
}

buildLexiconFonts {
	File lexiconFontsDestinationDir = new File(themeDestinationDir, "css/aui/lexicon/fonts")

	dependsOn buildLexicon

	doFirst {
		delete lexiconFontsDestinationDir
	}

	eachFile new StripPathSegmentsAction(7)

	from {
		zipTree(configurations.lexicon.singleFile)
	}

	include "META-INF/resources/webjars/lexicon/${lexiconVersion}/release/fonts/"
	includeEmptyDirs = false
	into lexiconFontsDestinationDir
>>>>>>> compatible
}

buildLexiconIcons {
	File lexiconIconsDestinationDir = new File(themeDestinationDir, "images/lexicon")

<<<<<<< HEAD
	dependsOn npmInstall

=======
>>>>>>> compatible
	doFirst {
		delete lexiconIconsDestinationDir
	}

<<<<<<< HEAD
	eachFile new StripPathSegmentsAction(4)
	from npmInstall.nodeModulesDir
	include "clay/build/images/icons/"
=======
	eachFile new StripPathSegmentsAction(8)

	from {
		zipTree(configurations.lexicon.singleFile)
	}

	include "META-INF/resources/webjars/lexicon/${lexiconVersion}/release/images/icons/"
>>>>>>> compatible
	includeEmptyDirs = false
	into lexiconIconsDestinationDir
}

buildTheme {
	dependsOn buildAlloyUITheme
<<<<<<< HEAD
	dependsOn buildClayFonts
	dependsOn buildClayIcons
	dependsOn buildFontAwesome
=======
	dependsOn buildLexiconFonts
>>>>>>> compatible
	dependsOn buildLexiconIcons
}

classes {
	dependsOn buildTheme
}

<<<<<<< HEAD
configJSModules {
	dependsOn = []
	enabled = false
}

dependencies {
	alloyUI group: "com.liferay.webjars", name: "com.liferay.webjars.alloy-ui", transitive: false, version: alloyUIVersion

	fontAwesome group: "org.webjars", name: "font-awesome", transitive: false, version: fontAwesomeVersion
=======
dependencies {
	alloyUI group: "com.liferay.webjars", name: "com.liferay.webjars.alloy-ui", transitive: false, version: alloyUIVersion

	lexicon group: "com.liferay.webjars", name: "com.liferay.webjars.lexicon", transitive: false, version: lexiconVersion
>>>>>>> compatible
}

publishNodeModule {
	dependsOn jar
	workingDir = "src/main/resources/META-INF/resources/_unstyled"
}